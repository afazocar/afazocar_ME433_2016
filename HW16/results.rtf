{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf470
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid2\'02\'01.;}{\levelnumbers\'01;}\fi-360\li1440\lin1440 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid102\'02\'01.;}{\levelnumbers\'01;}\fi-360\li1440\lin1440 }{\listname ;}\listid2}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 My tech cup entry was very simple, yet efficient.\
\
On the android side:\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls1\ilvl0\cf0 {\listtext	\'95	}I tracked the line using one row only. The row could be selected in real time via a slider.\
{\listtext	\'95	}The line was tracked by taking the difference between green and red pixels. The threshold could also be selected in real time via a slider.\
{\listtext	\'95	}The android app could send 5 possible integers to the PIC, each determining a different state:\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls1\ilvl1\cf0 {\listtext	1.	}Don\'92t move- initial state\
{\listtext	2.	}Turn left- when center of line was between 33% and 49% of screen width\
{\listtext	3.	}Turn right- when center of line was between 51% and 66% of screen width\
{\listtext	4.	}Turn hard left- when center of line was less than 33% of screen width\
{\listtext	5.	}Turn hard right- when center of line was more than 66% of screen width\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls1\ilvl0\cf0 {\listtext	\'95	}When the center of mass was in the center of the image (line was outside of image), no command was sent. This resulted in the car continuing to turn in the direction it was going before the line was lost. This was extremely useful for steep turns.\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
On the PIC32 side:\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls2\ilvl0\cf0 {\listtext	\'95	}Each motor was controlled via simple PWM. The PWM duty cycles depended on the different states:\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls2\ilvl1\cf0 {\listtext	1.	}Don\'92t move- 0% duty cycle on both motors\
{\listtext	2.	}Turn left- 50% duty cycle on left motor, 100% duty cycle on right motor\
{\listtext	3.	}Turn right- 100% duty cycle on left motor, 50% duty cycle on right motor\
{\listtext	4.	}Turn hard left- 17% duty cycle on left motor, 100% duty cycle on right motor\
{\listtext	5.	}Turn hard right- 100% duty cycle on left motor, 17% duty cycle on right motor\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
Since I made a rocket, I also added the sound of a launch countdown and rocket engines firing (to loop throughout race); however, the sound was not loud enough, so I disabled it for the race.\
\
I initially had the PIC and cables at the rear of the rocket, but that shifted the center of mass too far back and would occasionally prevent the wheels from spinning. The final race configuration has the majority of the mass directly over the wheels to prevent this from happening.\
\
During practice runs I was averaging 1:03 minutes per lap. During the actual race, the robot stepped up its game and finished in 1:02 minutes.\
}